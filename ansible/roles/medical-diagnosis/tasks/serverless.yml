- name: "wait for {{ serverless.eventing.namespace }} to be created"
  kubernetes.core.k8s_info:
    kind: Namespace
    name: "{{ serverless.eventing.namespace }}"
    wait: yes
    wait_sleep: 10
    wait_timeout: 360

- name: Wait until KNative Serving installation is complete
  kubernetes.core.k8s_info:
    api_version: operator.knative.dev/v1alpha1
    kind: KnativeServing
    name: knative-serving
    namespace: knative-serving
  register: r_kn_serving
  retries: 30
  delay: 10
  until:
  - r_kn_serving.resources[0].status.conditions[0].status is defined
  - r_kn_serving.resources[0].status.conditions[0].status == "True"
  - r_kn_serving.resources[0].status.conditions[1].status is defined
  - r_kn_serving.resources[0].status.conditions[1].status == "True"
  - r_kn_serving.resources[0].status.conditions[2].status is defined
  - r_kn_serving.resources[0].status.conditions[2].status == "True"
  - r_kn_serving.resources[0].status.conditions[3].status is defined
  - r_kn_serving.resources[0].status.conditions[3].status == "True"

- name: remove kafkasource
  kubernetes.core.k8s:
    state: absent
    api_version: sources.knative.dev/v1beta1
    kind: KafkaSource
    name: xray-images

- name: remove  kafkaservice
  kubernetes.core.k8s:
    state: absent
    api_version: serving.knative.dev/v1
    kind: Service
    name: risk-assessment

- name: Render the kafkasource templates 
  kubernetes.core.helm_template:
    chart_ref: "{{ helm_charts_dir }}/xraylab/{{ kafkasource.template_dir }}"
    output_dir: "{{ helm_output_dir }}"
    values_files:
      - "{{ pattern_repo_dir}}/values-global.yaml"

- name: Apply the kafkasource manifests
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop:
    - "{{ helm_output_dir }}/{{ kafkasource.template_dir }}/templates/xray-kafka-risk-assessment-svc.yaml"
    - "{{ helm_output_dir }}/{{ kafkasource.template_dir }}/templates/xray-kafka-risk-assessment-source.yaml"
